local settings = require("00_common.modules.settings")

local screen_width = settings.screen_width
local screen_height = settings.screen_height

local poop_z = 0.5
local grass_z = 0.4

local num_poops = 6
local poop_margin = 40

local move_duration = 0.4
local win_move_duration = 0.3
local pause_duration = 0.25
local poop_duration = 0.15
local step_duration = move_duration + pause_duration

local function dog_move_to(position, duration, on_complete)
	local current_position = go.get_position("dog-pickup")
	sprite.set_hflip("dog-pickup", position.x < current_position.x)
	go.animate("dog-pickup", "position", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, duration, 0, on_complete)
end

local function plan_introduction(self)
	local original_dog_position = go.get_position("dog-pickup")
	
	local min_x = poop_margin
	local max_x = screen_width - poop_margin
	self.poops = {}
	for i = 1, num_poops do
		timer.delay((i - 1) * step_duration, false, function()
			sprite.play_flipbook("dog-pickup#sprite", "run")
			local position = vmath.vector3()
			position.x = math.random(min_x, max_x)
			position.y = i / (num_poops + 1) * screen_height
			position.z = original_dog_position.z
			dog_move_to(position, move_duration, function()
				sprite.play_flipbook("dog-pickup#sprite", "sit")
				timer.delay(poop_duration, false, function()
					position.z = poop_z
					local poop_hash = factory.create("#dog-poop-factory", position)
					self.poops[poop_hash] = true
				end)
			end)
		end)
	end
	timer.delay(num_poops * step_duration, false, function()
		sprite.play_flipbook("dog-pickup#sprite", "run")
		local position = vmath.vector3()
		position.x = original_dog_position.x
		position.y = screen_height - original_dog_position.y
		position.z = original_dog_position.z
		dog_move_to(position, move_duration)
	end)
end

local num_grass = 100
local grass_margin = 5

local function spawn_grass(self)
	local position = vmath.vector3()
	local min_x = grass_margin
	local max_x = screen_width - grass_margin
	local min_y = grass_margin
	local max_y = screen_height - grass_margin
	local min_z = 0
	local max_z = grass_z
	for i = 1, num_grass do
		position.x = math.random(min_x, max_x)
		position.y = math.random(min_y, max_y)
		position.z = vmath.lerp(i / num_grass, min_z, max_z)
		factory.create("#grass-factory", position, nil, nil, 3)
	end
end

function init(self)
	msg.post("main:/background", "set_background", { color = vmath.vector4(0.32, 0.60, 0.32, 0), sprite = "#sprite-game" } )
	msg.post("/intro#intro", "start", { text = "Ramasse !" })
	plan_introduction(self)
	spawn_grass(self)

	self.won_level = false
	self.score = 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("intro_end") then
		msg.post(".", "acquire_input_focus")
		msg.post("timer", "start", { duration = 5 })
	elseif message_id == hash("add_score") then
		self.score = self.score + 1
		self.poops[message.poop_hash] = nil
		if self.score >= num_poops then
			self.won_level = true
			msg.post("timer", "interrupt")
		end
	elseif message_id == hash("timer_end") then
		msg.post(".", "release_input_focus")
		if self.won_level then
			local original_dog_position = go.get_position("dog-pickup")
			local position = vmath.vector3()
			position.z = original_dog_position.z
			local function run_around()
				position.x = screen_width / 2 + math.random(-screen_width / 4, screen_width / 4)
				position.y = screen_height / 2 + math.random(-screen_width / 4, screen_width / 4)
				dog_move_to(position, win_move_duration, run_around)
			end
			run_around()
		else
			for poop_hash in pairs(self.poops) do
				local poop_sprite_url = msg.url(nil, poop_hash, "sprite")
				sprite.play_flipbook(poop_sprite_url, "dog-poop-flies")
			end
		end
		msg.post("outro", "start")
	elseif message_id == hash("outro_end") then
		msg.post("main:/loader#loader", "level_finished", { won_level = self.won_level })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		if action.pressed then
			msg.post("cursor", "set_position", { x = action.x, y = action.y })
		end
		return true
	end
	return false
end
