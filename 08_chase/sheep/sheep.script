local function start_move(self, direction)
	if self.entered_enclosure then
		if direction.y < 0 then
			direction.y = 0
			direction = vmath.normalize(direction)
		end
	end
	if not self.direction then
		sprite.play_flipbook("#sprite", "move")
	end
	self.direction = direction
	sprite.set_hflip("#sprite", direction.x < 0)
end

local function stop_move(self)
	self.direction = nil
	sprite.play_flipbook("#sprite", "sheep-1")
end

function init(self)
	msg.post("chase_script", "add_sheep")
	
	self.direction = nil
	self.correction = vmath.vector3()
	self.entered_enclosure = false
	self.lost_level = false
end

function update(self, dt)
	if self.direction and not self.level_lost then
		local speed = 100
		local position = go.get_position()
		position = position + self.direction * dt * speed
		go.set_position(position)
	end
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("flee") then
		if self.entered_enclosure then
			return
		end
		local position = go.get_position()
		local direction = vmath.vector3()
		direction.x = position.x - message.position.x
		direction.y = position.y - message.position.y
		direction = vmath.normalize(direction)
		start_move(self, direction)
	elseif message_id == hash("contact_point_response") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
			if self.direction and message.other_id == hash("default") then
				-- move in the same direction along the obstacle
				local direction = vmath.normalize(vmath.cross(message.normal, vmath.normalize(vmath.cross(self.direction, message.normal))))
				if direction.x ~= direction.x then
					stop_move(self)
				else
					start_move(self, direction)
				end
			end
		end
	elseif message_id == hash("enter_enclosure") then
		if self.entered_enclosure then
			return
		end
		self.entered_enclosure = true
		start_move(self, vmath.vector3(0, 1, 0))
		msg.post("chase_script", "add_sheep_inside")
	elseif message_id == hash("won_level") then
		stop_move(self)
	elseif message_id == hash("lost_level") then
		if not self.entered_enclosure then
			local dog_position = go.get_position("dog-chase")
			local move_direction = dog_position - go.get_position()
			move_direction.z = 0
			move_direction = vmath.normalize(move_direction)
			start_move(self, move_direction)
		end
	end
end