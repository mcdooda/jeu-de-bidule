local screen_width = 430
local screen_height = 640
local margin = 20

local fur_amount = 100

local function spawn_fur(self)
	local position = vmath.vector3()
	local min_x = margin
	local max_x = screen_width - margin
	local min_y = margin
	local max_y = screen_height - margin
	local min_z = 0
	local max_z = 0.5
	local scale = vmath.vector3(2, 2, 1)
	self.fur = {}
	for i = 1, fur_amount do
		position.x = math.random(min_x, max_x)
		position.y = math.random(min_y, max_y)
		position.z = math.random(min_z, max_z)

		local angle = math.pi * math.random()
		local rotation = vmath.quat_rotation_z(angle)
		
		local fur_hash = factory.create("#dog-fur-factory", position, rotation, nil, scale)
		self.fur[fur_hash] = true
	end
end

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.32, 0.60, 1, 0) } )
	msg.post("/intro#intro", "start", { text = "Nettoie !" })
	msg.post("main:/score#score", "show_score")
	spawn_fur(self)

	self.score = 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("intro_end") then
		msg.post(".", "acquire_input_focus")
		msg.post("timer", "start", { duration = 5 })
	elseif message_id == hash("add_score") then
		self.score = self.score + 1
		self.fur[message.fur_hash] = nil
	elseif message_id == hash("timer_end") then
		msg.post(".", "release_input_focus")
		if self.score > fur_amount * 0.6 then
			for fur_hash in pairs(self.fur) do
				local fur_sprite_url = msg.url(nil, fur_hash, "sprite")
				go.animate(fur_sprite_url, "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1,1,1,0), go.EASING_LINEAR, 0.3)
			end
			msg.post("main:/score#score", "add_score")
		else
			-- TODO lost animation
		end
		msg.post("outro", "start")
	elseif message_id == hash("outro_end") then
		msg.post("main:/loader#loader", "load_next_level")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		if not action.released then
			msg.post("robot-vacuum", "move_towards", { x = action.x, y = action.y })
		else
			msg.post("robot-vacuum", "stop_move")
		end
		return true
	end
	return false
end
