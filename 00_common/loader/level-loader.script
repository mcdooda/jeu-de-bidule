local levels = require("00_common.levels.levels")

local function get_level_proxy(level_name)
	return "#" .. level_name .. "-level-proxy"
end

local function get_level_script_url(level_name)
	return level_name .. "_collection:/" .. level_name .. "_script#script"
end

local function init_level(proxy, level_name, difficulty)
	assert(difficulty, "no level difficulty")
	msg.post(proxy, "init")
	msg.post(proxy, "enable")
	local level_script_url = get_level_script_url(level_name)
	print("init_level", difficulty)
	msg.post(level_script_url, "init_level", { difficulty = difficulty })
end

local function deinit_level(proxy)
	msg.post(proxy, "disable")
	msg.post(proxy, "final")
	msg.post(proxy, "unload")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_level_name = nil
	self.current_level_proxy = nil
	self.current_level_index = nil
	self.current_level_difficulty = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_level") then
		local proxy = get_level_proxy(message.level_name)
		self.current_level_proxy = proxy
		self.current_level_name = message.level_name
		self.current_level_difficulty = message.difficulty
		print("setting difficulty", self.current_level_difficulty)
		msg.post(proxy, "load")
	elseif message_id == hash("load_first_level") then
		self.current_level_index = 1
		msg.post(".", "load_level", { level_name = levels[1], difficulty = 1 })
	elseif message_id == hash("load_next_level") then
		if not self.current_level_index then
			-- debug mode, reload same level
			msg.post(self.current_level_proxy, "load")
			return
		end
		local next_level_index = self.current_level_index + 1
		if next_level_index > #levels then
			return
		end
		local next_level_name = levels[next_level_index]
		self.current_level_index = next_level_index
		if message.difficulty then
			self.current_level_difficulty = message.difficulty
		end
		local difficulty = self.current_level_difficulty
		msg.post(".", "load_level", { level_name = next_level_name, difficulty = difficulty })
	elseif message_id == hash("unload_level") then
		deinit_level(self.current_level_proxy)
	elseif message_id == hash("proxy_loaded") then
		init_level(sender, self.current_level_name, self.current_level_difficulty)
	end
end