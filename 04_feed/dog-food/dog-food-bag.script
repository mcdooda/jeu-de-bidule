local settings = require("00_common.modules.settings")

local screen_width = settings.screen_width

local difficulty_settings = {
	[1] = {
		animate = function(self)
			go.animate("dog-food-bag", "position", go.PLAYBACK_LOOP_PINGPONG, self.right_position, go.EASING_INOUTCUBIC, 2, math.random() * 1.5)
		end,
		food_initial_force_y = -10000
	},
	[2] = {
		animate = function(self)
			local function move()
				local position = go.get_position(".")
				local move_to_position = vmath.lerp(math.random(), self.left_position, self.right_position)
				local speed = 300
				local duration = math.abs(position.x - move_to_position.x) / speed
				go.animate("dog-food-bag", "position", go.PLAYBACK_ONCE_FORWARD, move_to_position, go.EASING_INOUTCUBIC, duration, 0, move)
			end
			move()
		end,
		food_initial_force_y = -45000
	}
}

function init(self)
	self.timer = nil
	
	local position = go.get_position(".")
	local move_to_position = vmath.vector3()
	move_to_position.x = screen_width - position.x
	move_to_position.y = position.y
	move_to_position.z = position.z
	self.left_position = position
	self.right_position = move_to_position
end

local function init_difficulty(self, difficulty)
	self.difficulty_settings = difficulty_settings[difficulty]
	self.difficulty_settings.animate(self)
end

local function spawn_food(self, handle, time_elapsed)
	local position = go.get_position(".")
	position.y = position.y - 130
	
	local food_id = factory.create("#food-factory", position)

	-- apply force
	go.set_scale(1, food_id)
	local angle = math.pi * math.random()
	local rotation = vmath.quat_rotation_z(angle)
	go.set_rotation(rotation, food_id)

	local force = vmath.vector3()
	force.x = 0
	force.y = self.difficulty_settings.food_initial_force_y
	force.z = 0

	local force_position = vmath.vector3(position)
	force_position.x = force_position.x + math.random(-1, 1)

	msg.post(msg.url(nil, food_id, "collision"), "apply_force", { force = force, position = force_position })

	-- notify level script
	msg.post("feed_script", "food_spawned")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_difficulty") then
		init_difficulty(self, message.difficulty)
	elseif message_id == hash("start_spawn_food") then
		self.timer = timer.delay(0.05, true, spawn_food)
	elseif message_id == hash("stop_spawn_food") then
		timer.cancel(self.timer)
		self.timer = nil
	end
end
