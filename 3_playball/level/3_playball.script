local function throw_ball(self)
	local force = vmath.vector3()
	local duration = self.released.time - self.pressed.time
	local force_multiplier = 700
	force.x = ((self.released.position.x - self.pressed.position.x) / duration) * force_multiplier
	force.y = ((self.released.position.y - self.pressed.position.y) / duration) * force_multiplier
	force.z = 0

	local ball_position = go.get_world_position("ball")
	local position_distance = 6
	local position = ball_position + vmath.normalize(self.pressed.position - ball_position) * position_distance
	
	msg.post("ball#collision", "apply_force", { force = force, position = position })

	self.ball_thrown = vmath.length(force) > 0
	self.ball_stopped = false
end

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.50, 0.76, 0.42, 0) })
	msg.post("/intro#intro", "start", { text = "Joue !" })
	msg.post("main:/score#score", "show_score")

	self.time = 0
	self.pressed = {
		position = nil,
		time = nil
	}
	self.released = {
		position = nil,
		time = nil
	}
	self.limit_y = go.get_world_position("limit").y
	self.ball_thrown = false
	self.ball_stopped = false
	self.ball_previous_position = go.get_world_position("ball")
end

function update(self, dt)
	self.time = self.time + dt
	local ball_position = go.get_world_position("ball")
	local ball_velocity = (ball_position - self.ball_previous_position) * (1 / dt)
	self.ball_previous_position = vmath.vector3(ball_position)
	if self.ball_thrown and not self.ball_stopped then
		local ball_speed = vmath.length(ball_velocity)
		self.ball_stopped = ball_speed > 0 and ball_speed < 5
		if self.ball_stopped then
			msg.post(".", "ball_stopped")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("intro_end") then
		msg.post(".", "acquire_input_focus")
		msg.post("timer", "start", { duration = 3 })
	elseif message_id == hash("ball_stopped") then
		msg.post("ball#collision", "disable")
		local ball_position = go.get_world_position("ball")
		local dog_z = go.get_position("dog-playball").z
		local destination
		local animation
		if ball_position.y > self.limit_y then
			destination = vmath.vector3(ball_position.x, ball_position.y, dog_z)
			animation = hash("run")
			msg.post("main:/score#score", "add_score")
		else
			destination = vmath.vector3(-50, -50, dog_z)
			animation = hash("idle")
		end
		sprite.play_flipbook("dog-playball#sprite", animation)
		go.animate("dog-playball", "position", go.PLAYBACK_ONCE_FORWARD, destination, go.EASING_LINEAR, 2.5)
		msg.post("outro", "start")
	elseif message_id == hash("timer_end") then
		msg.post(".", "release_input_focus")
		if not self.ball_thrown then
			msg.post(".", "ball_stopped")
		end
	elseif message_id == hash("outro_end") then
		msg.post("main:/loader#loader", "load_next_level")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		if action.pressed then
			self.pressed.position = vmath.vector3(action.x, action.y, 0)
			self.pressed.time = self.time
		elseif action.released then
			if self.pressed.time then
				self.released.position = vmath.vector3(action.x, action.y, 0)
				self.released.time = self.time
				throw_ball(self)
				msg.post(".", "release_input_focus")
			end
		end
		return true
	end
	return false
end
