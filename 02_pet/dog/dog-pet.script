local settings = require("00_common.modules.settings")

local screen_width = settings.screen_width
local screen_height = settings.screen_height
local margin = 50

local min_x = margin
local max_x = screen_width - margin
local min_y = margin
local max_y = screen_height - margin

local function draw_circle(center, radius, color)
	local previous_point = center + vmath.vector3(radius, 0, 0)
	local current_point = vmath.vector3()
	local num_segments = 32
	for i = 1, num_segments do
		current_point.x = center.x + math.cos(i / num_segments * 2 * math.pi) * radius
		current_point.y = center.y + math.sin(i / num_segments * 2 * math.pi) * radius
		msg.post("@render:", "draw_line", { start_point = previous_point, end_point = current_point, color = color })
		previous_point = vmath.vector3(current_point)
	end
end

local difficulty_settings = {
	[1] = {
		win_score = 2.5,
		init_move = function(self)

		end,
		move = function(self, dt)

		end,
		play_animation = function(self)
			if self.won_level then
				sprite.play_flipbook("#sprite-1", "goggly-eyes")
			else
				sprite.play_flipbook("#sprite-1", "cry")
			end
		end
	},
	[2] = {
		win_score = 4.5,
		init_move = function(self)
			self.heading = 0
			self.wheel_distance = 90
			self.wheel_radius = 70
			self.wheel_angle = math.pi / 4
			self.speed = 1
		end,
		move = function(self, dt)
			local red = vmath.vector4(1, 0, 0, 0.5)
			local blue = vmath.vector4(0, 0, 1, 0.5)

			local position = go.get_position()
			
			local wheel_center = position + vmath.vector3(math.cos(self.heading), math.sin(self.heading), 0) * self.wheel_distance
			--[[
			msg.post("@render:", "draw_line", { start_point = position, end_point = wheel_center, color = red })
			draw_circle(wheel_center, self.wheel_radius, red)
			]]

			self.wheel_angle = self.wheel_angle + (math.random() * 2 - 1) * dt * 10

			local steering_center = vmath.vector3()
			steering_center.x = wheel_center.x + math.cos(self.wheel_angle + self.heading) * self.wheel_radius
			steering_center.y = wheel_center.y + math.sin(self.wheel_angle + self.heading) * self.wheel_radius
			--draw_circle(steering_center, 20, blue)

			local steering = steering_center - position
			steering.z = 0

			if position.x < min_x and steering.x < 0 then
				steering.x = -steering.x
				self.heading = math.pi - self.heading
				self.wheel_angle = 0
			elseif position.x > max_x and steering.x > 0 then
				steering.x = -steering.x
				self.heading = math.pi - self.heading
				self.wheel_angle = 0
			end

			if position.y < min_y and steering.y < 0 then
				steering.y = -steering.y
				self.heading = -self.heading
				self.wheel_angle = 0
			elseif position.y > max_y and steering.y > 0 then
				steering.y = -steering.y
				self.heading = -self.heading
				self.wheel_angle = 0
			end

			local direction = vmath.vector3()
			direction.x = math.cos(self.heading)
			direction.y = math.sin(self.heading)
			direction = vmath.normalize(direction)

			local smoothed_direction = direction + steering * 0.1 * dt
			
			self.heading = math.atan2(smoothed_direction.y, smoothed_direction.x)

			go.set_position(go.get_position() + steering * self.speed * dt)
			self.speed = math.min(self.speed + dt * 2, 6)
		end,
		play_animation = function(self)
			local easing = go.EASING_LINEAR
			if self.won_level then
				easing = go.EASING_OUTELASTIC
			end
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.original_position, easing, 1)
			if self.won_level then
				sprite.play_flipbook("#sprite-2", "goggly-eyes")
			else
				sprite.play_flipbook("#sprite-2", "cry")
			end
		end
	}
}

local num_difficulty_levels = #difficulty_settings

function init(self)
	self.original_position = go.get_position()
	self.score = 0
	self.currently_petted = false
	self.is_moving = true
	self.won_level = false

	for i = 1, num_difficulty_levels do
		msg.post("#collision-" .. tostring(i), "disable")
		msg.post("#sprite-" .. tostring(i), "disable")
	end
end

function update(self, dt)
	if self.won_level then
		return
	end
	if self.is_moving then
		self.difficulty_settings.move(self, dt)
	end
	if self.currently_petted then
		self.score = self.score + dt
		if self.score >= self.difficulty_settings.win_score then
			self.won_level = true
			msg.post("pet_script", "won_level")
		end
	end
end

local function set_difficulty(self, difficulty)
	msg.post("#collision-" .. tostring(difficulty), "enable")
	msg.post("#sprite-" .. tostring(difficulty), "enable")
	self.difficulty_settings = difficulty_settings[difficulty]
	self.difficulty_settings.init_move(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_difficulty") then
		set_difficulty(self, message.difficulty)
	elseif message_id == hash("trigger_response") then
		assert(message.other_id == hash(msg.url("hand-pet").path))
		self.currently_petted = message.enter
	elseif message_id == hash("play_end_animation") then
		self.is_moving = false
		self.difficulty_settings.play_animation(self)
	end
end
