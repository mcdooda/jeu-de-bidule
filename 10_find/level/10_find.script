local settings = require("00_common.modules.settings")

local screen_width = settings.screen_width
local screen_height = settings.screen_height

local num_color_swaps = 15

local function spawn_color_swaps(self)
	for i = 1, num_color_swaps do
		local position = vmath.vector3()
		position.x = math.random(screen_width / 5, screen_width * 4 / 5)
		position.y = math.random(screen_height * 2 / 5, screen_height * 4 / 5)
		position.z = 1.0 - (position.y / screen_height)
		local color_swap = factory.create("#dog-color-swap-factory", position)
		self.dogs[#self.dogs + 1] = color_swap
	end
end

local function spawn_real_dog(self)
	local position = vmath.vector3()
	position.x = math.random(screen_width / 5, screen_width * 4 / 5)
	position.y = math.random(screen_height * 2 / 5, screen_height * 4 / 5)
	position.z = 1.0 - (position.y / screen_height)
	self.real_dog = factory.create("#dog-find-factory", position)
	self.dogs[#self.dogs + 1] = self.real_dog
end

function init(self)
	msg.post("main:/background", "set_background", { color = vmath.vector4(0.4, 1.0, 0.74, 0), sprite = "#sprite-game" } )
	msg.post("/intro#intro", "start", { text = "Trouve !" })
	msg.post("main:/score#score", "show_score")

	self.real_dog = nil
	self.dogs = {}
	spawn_color_swaps(self)
	spawn_real_dog(self)

	self.won_level = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("intro_end") then
		msg.post(".", "acquire_input_focus")
		msg.post("timer", "start", { duration = 10 })
	elseif message_id == hash("timer_end") then
		msg.post(".", "release_input_focus")

		msg.post("outro", "start")
	elseif message_id == hash("outro_end") then
		msg.post("main:/loader#loader", "level_finished", { won_level = self.won_level })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") then
		local closest_dog = nil
		local closest_distance = math.huge
		local click_position = vmath.vector3(action.x, action.y, 0)
		for i = 1, #self.dogs do
			local dog = self.dogs[i]
			local dog_position = go.get_position(dog)
			dog_position.z = 0
			local distance = vmath.length(click_position - dog_position)
			if distance < closest_distance then
				closest_distance = distance
				closest_dog = dog
			end
		end

		if closest_distance < 20 then
			local animation_duration = 0.7
			if closest_dog == self.real_dog then
				self.won_level = true
				go.animate(self.real_dog, "scale", go.PLAYBACK_ONCE_FORWARD, 3, go.EASING_OUTBOUNCE, animation_duration)
				go.set(self.real_dog, "position.z", 1)
			end
			for i = 1, #self.dogs do
				local dog = self.dogs[i]
				if dog ~= self.real_dog then
					go.animate(msg.url(nil, dog, "sprite"), "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, animation_duration)
				end
			end
			msg.post("timer", "interrupt")
		end
	end
end
